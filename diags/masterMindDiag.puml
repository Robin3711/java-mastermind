@startuml
skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods
hide interface attributes

skinparam class {
    backgroundColor<<enum>> Orange
    backgroundColor<<interface>> LightGreen
    backgroundColor<<abstract>> LightBlue
    backgroundColor LightGray
}

package views
{
  class MenuWindow
  {
    + MenuWindow(gameController : GameController) : MenuWindow
  }
  class GameWindow implements .models.GameObserver
  {
    -_attemptIndex : Integer
    -_isNumeric : Boolean
    + GameWindow(gameController : GameController) : GameWindow
    + onAttemptPerformed(attempt : Attempt)
    + onRoundFinished()
    - resetRound()
    + onGameFinished()
  }
  class EndWindow
  {
  + EndWindow(gameController : GameController) : EndWindow
  }
}

package controllers
{
  class GameController
  {
    -_username : String
    -_nbRounds : Integer
    -_nbColors : Integer
    -_nbColorsInCombination : Integer
    -_nbAttempts : Integer
    + startGame(username : String, gameMode : GameWindow, nbRounds : Integer, nbColors : Integer, nbColorsInCombination : Integer, nbAttempts : Integer)
    + submitCombination(pawnColors : PawnColor[])
    + nextRound()
    - endGame()
   }
}

package models
{
  class Game
  {
    -_currentRound : Integer
    + Game(nbRounds : Integer) : Game
    + calculateScoreGame() : Integer
    + nextRound(nbAttempts : Integer, nbColorsInCombination : Integer,gameMode : GameMode)
    + public submitCombination(combination : Combination)
    + addObserver(gameObserver : GameObserver)
    - notifyAttemptPerformed(attempt : Attempt)
    - notifyRoundFinished()
    - notifyGameFinished()
  }

  class Round
  {
    -_isWon : Boolean
    + Round(nbAttempts : Integer, nbColorsInCombination : Integer, gameMode : GameMode) : Round
    + calculateScoreRound() : Integer
    + submitCombination(combination : Combination) : Attempt
  }

  class Attempt
  {
    + Attempt(combinationSubmitted : Combination, clues : Clue[]) : Attempt
    + sortClues()
  }

  class Combination
  {
    + _nbColorsInCombination : Integer
    + Combination(int nbColorsInCombination) : Combination
  }

  class Solution extends Combination
  {
    + Solution(nbColorsInCombination : Integer) : Solution
    + generateSolution()
    + compareWithCombination(combination : Combination) : Clue[]
  }
  interface GameObserver
  {
    + onAttemptPerformed(attempt : Attempt)
    + onRoundFinished()
    + onGameFinished()
  }
  enum Clue
  {
    + WELL_PLACED
    + MISPLACED
    + WRONG
  }
  enum GameMode
  {
    + CLASSIC
    + EASY
    + NUMERIC
  }
  enum PawnColor
  {
    + RED
    + GREEN
    + BLUE
    + YELLOW
    + ORANGE
    + PINK
    + LIGHT_GRAY
    + MAGENTA
  }
}

class MasterMindApp
{
}

Game *-> "3.d.5 \n -_rounds" Round : > <<owns>>
Game *-> "1.u.* \n -_observers" GameObserver : > <<owns>>
Game ..> GameMode : > <<uses>>
Game ..> Combination : > <<uses>>

Round *--> "1 \n -_solution" Solution : > <<owns>>
Round *-d-> "10..12 \n -_attempts" Attempt : > <<owns>>
Round *--> "1 \n -_gamemod" GameMode : > <<owns>> !
Round ..> Combination : > <<uses>>
Round ..> Clue : > <<uses>>

Attempt *-> "1\n- _combinationSubmited" Combination : > <<owns>>
Attempt *-> "1\n- _clues" Clue : > <<owns>>

Combination o-> "4..6\n # _PAWNS" PawnColor : > <<contains>>

Solution .d.> PawnColor : > <<uses>>
Solution .d.> Clue : > <<uses>>

GameController *-d-> "1 \n -_game" Game : > <<owns>>
GameController .u.> GameWindow : > <<create>>
GameController .u.> EndWindow : > <<create>>
GameController .d.> GameMode : > <<uses>>

MenuWindow .d.> GameController : > <<uses>>
MenuWindow .d.> GameMode : > <<uses>>

GameWindow .d.> GameController : > <<uses>>
GameWindow .d.> GameMode : > <<uses>>

EndWindow .d.> GameController : > <<uses>>

MasterMindApp .d..> GameController : > <<create>>
MasterMindApp .d..> MenuWindow : > <<create>>
@enduml
