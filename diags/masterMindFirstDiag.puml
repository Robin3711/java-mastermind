@startuml

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods
hide interface attributes

class MasterMindApp {
    - main(args: String[])
}

package models {
    class MasterMind {}
    class Game {
        - _nbRounds: Integer
        - _currentRoundNb: Integer
        + Game(nbRounds: Integer)
        '+ updateWinRound()
        '+ updateLoseRound()
        '+ updateForfeitRound()
        + nextRound(nbAttempts: Integer, nbColorsInCombination: Integer)
        - isGameOver(): Boolean
        - launchNextRound(nbAttempts: Integer, nbColorsInCombination: Integer)
        - getCurrentRound(): Round
        - endGame()
    }
    class Round {
        - _nbAttempts: Integer
        - _currentAttemptNb: Integer
        + Round(nbAttempts: Integer, nbColorsInCombination: Integer)
        + setObserver(observer: GameObserver)
        '- notifyWinRound()
        '- notifyLoseRound(score: Integer)
        '- notifyForfeitRound()
        - nextAttempt()
        - isRoundOver(): Boolean
        - launchNextAttempt()
        + submitCombination(combination: Combination)
        '- winRound()
        '- loseRound()
        '- forfeitRound()
        - endRound()
        + getSolution(): Solution
    }
    class Combination {
        - _nbColorsInCombination: Integer
        # Combination()
        + Combination(nbColorsInCombination: Integer)
        + getNbColorsInCombination(): Integer
        + setPawns(pawns: PawnColor[])
        + getPawns(): PawnColor[]
    }
    class Solution extends Combination {
        + Solution(nbColorsInCombination: Integer)
        + generateSolution()
        + compareWithCombination(combination: Combination): Clue[]
        + isInSolution(pawnColor: PawnColor): Boolean
        + isSolutionFound(clues : Clue[]): Boolean
        + sortClues(clues: Clue[]): Clue[]
    }
    class Attempt
    {
        + Attempt()
    }
    /'
    class GenerateCluesFactory {
        + createClassic(): GenerateCluesStrategy
        + createEasy(): GenerateCluesStrategy
    }
    class GenerateCluesClassic extends GenerateCluesTemplate implements GenerateCluesStrategy {
        + CluesClassic()
        + generateAdaptedClues(combinationSubmitted: Combination): Clue[]
    }
    class GenerateCluesEasy extends GenerateCluesTemplate implements GenerateCluesStrategy {
        + CluesEasy()
        + generateAdaptesClues(combinationSubmitted: Combination): Clue[]
    }
    class GenerateCluesTemplate {
        + generateClues(combinationSubmitted: Combination): Clue[]
    }

    interface GenerateCluesStrategy <<interface>> {
        + generateAdaptedClues(combinationSubmitted: Combination): Clue[]
    }
    '/

    /'
    interface RoundObserver <<interface>> {
        + updateWinRound()
        + updateLoseRound(score: Integer)
        + updateForfeitRound()
    }
    '/

    enum PawnColor <<enum>> {
        RED
        GREEN
        BLUE
        YELLOW
        ORANGE
        PINK
        LIGHT_GRAY
        MAGENTA
    }
    enum GameMode <<enum>> {
        CLASSIC
        EASY
        NUMERIC
    }
    enum Clue <<enum>> {
        WELL_PLACED
        MISPLACED
        WRONG
    }
}

'Relations

'Models

'Game
Game o--> "1\n- _currentRound" Round : > <<owns>>

'Round
Round *--> "1\n- _solution" Solution : > <<owns>>
'Relation avec observer dans la partie GameObserver
Round *--> "*\n- _attempt" Attempt : > <<owns>>

'Combination
Combination o--> "*\n # _pawns" PawnColor : > <<contains>>

'Solution
Solution ..> PawnColor : > <<uses>>
Solution ..> Clue : > <<uses>>
Solution ..> Combination : > <<uses>>

Attempt *--> "*\n- _clues" Clue : > <<owns>>
Attempt *--> "1\n _combination" Combination : > <<owns>>

'RoundObserver
'RoundObserver <--o "*\n- _roundObserver" Round : > <<observes>>

/'
'GenerateCluesFactory
GenerateCluesFactory ..> GenerateCluesClassic : > <<uses>>
GenerateCluesFactory ..> GenerateCluesEasy : > <<uses>>
GenerateCluesFactory ..> GenerateCluesStrategy : > <<uses>>

'GenerateCluesClassic
GenerateCluesClassic ..> Clue : > <<uses>>

'GenerateCluesEasy
GenerateCluesEasy ..> Clue : > <<uses>>

'GenerateCluesStrategy
GenerateCluesStrategy ..> Clue : > <<uses>>

'GenerateCluesTemplate
GenerateCluesTemplate ..> Clue : > <<uses>>
'/

'Gestion des stratégies dans la vue, mais génération des indices dans le modèle
'C'est le modèle qui renvoit les indices à la vue (triés ou non)
'Tous les Round d'une même instance de Game ont des attributs communs, donc stocker dans Game ?
'Stocker toutes les tentatives de la partie
'Stocker tous les indices obtenus
'Stocker tous les Round de la partie
'Dictionnaire de dictionnaires ?
'Comment prévenir Game que Round est terminé ?
'Classe Attempt

'Finir modèles pour le mardi 5 inclus
'Finir vues et controllers pour le dimanche 10 inclus (rendu 1)

@enduml