@startuml

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods
hide interface attributes

class MasterMindApp {
    - main(args: String[])
}

package models {
    class MasterMind {}
    class Game {
        - {static} _nbRounds: Integer
        - _currentRoundNb: Integer
        + Game()
        + {static} setNbRounds(nbRounds: Integer)
        'Pas encore utilisé, à supprimer ?
        + getNbRounds(): Integer
        - startGame()
        + nextRound()
        - isGameOver(): Boolean
        - launchNextRound()
        - endGame()
    }
    class Round {
        - {static} _nbAttempts: Integer
        - _currentAttemptNb: Integer
        + Round()
        + {static} setNbAttempts(nbAttempts: Integer)
        'Pas encore utilisé, à supprimer ?
        + getNbAttempts(): Integer
        - startRound()
        - nextAttempt()
        - isRoundOver(): Boolean
        - launchNextAttempt()
        + submitCombination(combination: Combination)
        - endRound()
    }
    class Combination {
        - {static} _nbColorsInCombination: Integer
        # Combination()
        + Combination(pawns : PawnColor[])
        + {static} setNbColorsInCombination(nbColorsInCombination: Integer)
        + getNbColorsInCombination(): Integer
    }
    class Solution extends Combination {
        + Solution()
        + generateSolution()
        + compareWithCombination(combination: Combination): Clue[]
        + isInSolution(pawnColor: PawnColor): Boolean
        + isSolutionFound(clues : Clue[]): Boolean
    }
    class GenerateCluesFactory {
        + createClassic(): GenerateCluesStrategy
        + createEasy(): GenerateCluesStrategy
    }
    class GenerateCluesClassic extends GenerateCluesTemplate implements GenerateCluesStrategy {
        + CluesClassic()
        + generateAdaptedClues(combinationSubmitted: Combination): Clue[]
    }
    class GenerateCluesEasy extends GenerateCluesTemplate implements GenerateCluesStrategy {
        + CluesEasy()
        + generateAdaptesClues(combinationSubmitted: Combination): Clue[]
    }
    class GenerateCluesTemplate {
        + generateClues(combinationSubmitted: Combination): Clue[]
    }

    interface GenerateCluesStrategy <<interface>> {
        + generateAdaptedClues(combinationSubmitted: Combination): Clue[]
    }
    interface MasterMindObserver <<interface>> {}
    interface GameObserver <<interface>> {}
    interface RoundObserver <<interface>> {}

    enum PawnColor <<enum>> {
        RED
        GREEN
        BLUE
        YELLOW
        ORANGE
        PINK
        LIGHT_GRAY
        MAGENTA
    }
    enum GameMode <<enum>> {
        CLASSIC
        EASY
        NUMERIC
    }
    enum Clue <<enum>> {
        WELL_PLACED
        MISPLACED
        WRONG
    }
}

'Relations

'Models

'Game
Game ..> Round : > <<uses>>

'Round
Round *--> "1\n- _solution" Solution : > <<owns>>
Round ..> Combination : > <<uses>>
Round ..> Clue : > <<uses>>

'Combination
Combination o--> "*\n # _pawns" PawnColor : > <<contains>>

'Solution
Solution ..> PawnColor : > <<uses>>
Solution ..> Clue : > <<uses>>

'GenerateCluesFactory
GenerateCluesFactory ..> GenerateCluesClassic : > <<uses>>
GenerateCluesFactory ..> GenerateCluesEasy : > <<uses>>
GenerateCluesFactory ..> GenerateCluesStrategy : > <<uses>>

'GenerateCluesClassic
GenerateCluesClassic ..> Clue : > <<uses>>

'GenerateCluesEasy
GenerateCluesEasy ..> Clue : > <<uses>>

'GenerateCluesStrategy
GenerateCluesStrategy ..> Clue : > <<uses>>

'GenerateCluesTemplate
GenerateCluesTemplate ..> Clue : > <<uses>>

@enduml